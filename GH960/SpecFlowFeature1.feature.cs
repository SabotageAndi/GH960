// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GH960
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("SpecFlowFeature1@Balances", Description="Feature: Balances\r\n\tAs a member\r\n\tI want to view my balance", SourceFile="SpecFlowFeature1.feature", SourceLine=0)]
    public partial class SpecFlowFeature1BalancesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecFlowFeature1.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SpecFlowFeature1@Balances", "Feature: Balances\r\n\tAs a member\r\n\tI want to view my balance", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ViewEstimatedBalancesForDBDMember(string joinDate, string conditionS, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Mobile"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View estimated balances for DBD Member", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("I am a registered Defined Benefit Division member who joined {0} with: {1}", joinDate, conditionS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I am logged into the MOL site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I navigate to the Balances page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "Account Balance",
                        "$14,747.96"});
            table1.AddRow(new string[] {
                        "Accumulation Balance",
                        "$14,747.96"});
            table1.AddRow(new string[] {
                        "DBD Balance",
                        "$0.00"});
            table1.AddRow(new string[] {
                        "Preserved Balance",
                        "$14,747.96"});
            table1.AddRow(new string[] {
                        "Non-Preserved Restricted Balance",
                        "$0.00"});
            table1.AddRow(new string[] {
                        "Non-Preserved Unrestricted Balance",
                        "$0.00"});
            table1.AddRow(new string[] {
                        "Balance Effective Date",
                        "23-10-2017"});
#line 11
 testRunner.Then("I can see my estimated balance on the Balances Page", ((string)(null)), table1, "Then ");
#line 22
 testRunner.When("I navigate to the Overview page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("I can see my balance summary on the Overview Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("View estimated balances for DBD Member, after 1-Jan-2015", new string[] {
                "Mobile"}, SourceLine=26)]
        public virtual void ViewEstimatedBalancesForDBDMember_After1_Jan_2015()
        {
#line 7
this.ViewEstimatedBalancesForDBDMember("after 1-Jan-2015", "NA", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
